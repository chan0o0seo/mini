name: Deploy to EC2 with Docker

on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행

jobs:
  deploy:
    runs-on: self-hosted  # EC2에서 실행

    steps:
      - name: 코드 가져오기
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Make gradlew executable
        run: chmod +x ./gradlew  # Ensure gradlew is executable

      - name: Gradle 빌드
        run: ./gradlew build  # Gradle 빌드를 실행합니다.

      - name: Docker 이미지 빌드
        run: docker build -t my-app .

      - name: Docker 이미지 푸시 (Optional)
        run: |
          docker tag my-app my-docker-repo/my-app:latest
          docker push my-docker-repo/my-app:latest
        # 여기에 Docker 레지스트리 푸시가 필요하다면 사용합니다.

      - name: 환경변수설정
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # 비공개 키를 GitHub Secrets에 저장하고 사용
      - name: EC2에 SSH 접속하여 배포
        run: |
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > /tmp/private-key.pem
          chmod 600 /tmp/private-key.pem  # SSH 키 파일에 올바른 권한 부여


          ssh -i /tmp/private-key.pem ubuntu@your-ec2-public-ip << EOF
            docker stop my-app-container || true
            docker rm my-app-container || true
            docker pull my-docker-repo/my-app:latest
            docker run -d --name my-app-container -p 8080:8080 my-docker-repo/my-app:latest
          EOF

        

      - name: Clean up
        run: docker system prune -f  # 불필요한 Docker 이미지와 컨테이너를 정리합니다.
